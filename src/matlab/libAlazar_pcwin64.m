function [methodinfo,structs,enuminfo,ThunkLibName]=foo
%FOO Create structures to define interfaces found in 'libAlazarAPI'.

%This function was generated by loadlibrary.m parser version  on Mon Mar  7 18:52:09 2016
%perl options:'libAlazarAPI.i -outfile=foo.m -thunkfile=libAlazar_thunk_pcwin64.c -header=libAlazarAPI.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libAlazar_thunk_pcwin64');
% int32_t connectBoard ( const char * ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='connectBoard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32_t disconnect ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='disconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int32_t setAll ( uint32_t systemId , uint32_t boardId , const ConfigData_t * config , AcquisitionParams_t * acqParams ); 
fcns.thunkname{fcnNum}='int32uint32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='setAll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'ConfigDataPtr', 'AcquisitionParamsPtr'};fcnNum=fcnNum+1;
% int32_t acquire ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='acquire'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int32_t wait_for_acquisition ( float * ch1 , float * ch2 ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='wait_for_acquisition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% int32_t stop (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int32_t flash_led ( int32_t numTimes , float period ); 
fcns.thunkname{fcnNum}='int32int32floatThunk';fcns.name{fcnNum}='flash_led'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single'};fcnNum=fcnNum+1;
% int32_t transfer_waveform ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='transfer_waveform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
structs.ConfigData.members=struct('acquireMode', 'cstring', 'bandwidth', 'cstring', 'clockType', 'cstring', 'delay', 'double', 'enabled', 'bool', 'label', 'cstring', 'recordLength', 'uint32', 'nbrSegments', 'uint32', 'nbrWaveforms', 'uint32', 'nbrRoundRobins', 'uint32', 'samplingRate', 'double', 'triggerCoupling', 'cstring', 'triggerLevel', 'double', 'triggerSlope', 'cstring', 'triggerSource', 'cstring', 'verticalCoupling', 'cstring', 'verticalOffset', 'double', 'verticalScale', 'double', 'bufferSize', 'uint32');
structs.AcquisitionParams.members=struct('samplesPerAcquisition', 'uint32', 'numberAcquistions', 'uint32');
methodinfo=fcns;